
> hyperoop-site@0.0.1 build:apidocs /home/bosm/src/hyperoop-project/site
> npm run build:documenter && node tools/dist/documenter.js apidocs.toml


> hyperoop-site@0.0.1 build:documenter /home/bosm/src/hyperoop-project/site
> tsc -p tools/documenter/tsconfig.json

### IRenderer

>>> type VNode<A = {}> = hyperapp.VNode<A>;
### VNode

>>> type LazyVNode<A = {}> = () => VNode<A>;
### LazyVNode

>>> type ImmediateComponent<A = {}> = (attributes: A, children: Array<VNode | string>) => VNode<A>;
### ImmediateComponent

>>> type LazyComponent<A = {}> = (attributes: A, children: Array<VNode | string>) => LazyVNode<A>;
### LazyComponent

>>> type Component<A = {}> = LazyComponent<A> | ImmediateComponent<A>;
### Component

>>> type Child = VNode | string | number | null;
### Child

>>> type JSXFactory = <A>(nodeName: NameType<A>, attributes?: A, ...children: Children) => VNode<A>;
### JSXFactory

>>> let h: JSXFactory;
### h

>>> function init<S extends {}, A extends Actions<S>>(el: HTMLElement, v: LazyVNode, a: A): void;
### init
### IActionsParent

>>> readonly Renderer: IRenderer;
### Renderer

>>> readonly History: Hist;
### History
### Actions

>>> readonly State: S;
### State

>>> readonly Remember: S;
### Remember

>>> readonly Renderer: IRenderer;
### Renderer

>>> readonly History: Hist;
### History

>>> constructor(start: S, hist?: number | Hist);
### undefined

>>> set(s: Partial<S>, remember?: boolean): void;
### set

>>> init(r: IRenderer): void;
### init
### SubActions

>>> constructor(start: S, parent: IActionsParent);
### undefined
### ILinkAttributes

>>> to: string | IToObject;
### to

>>> onclick?: (e: MouseEvent) => void;
### onclick

>>> const Link: (a: ILinkAttributes, children: (string | import("hyperapp").VNode<{}>)[]) => import("hyperapp").VNode<{
    href: string;
    onclick(e: MouseEvent): void;
    to: any;
}>;
### Link
### IToObject

>>> pathname?: string;
### pathname

>>> search?: string;
### search

>>> hash?: string;
### hash

>>> state: any;
### state
### IMatch

>>> isExact: boolean;
### isExact

>>> path: string;
### path

>>> url: string;
### url

>>> params?: {
        [K in string]: string;
    };
### params
### IRedirectAttributes

>>> from?: string;
### from

>>> to: string;
### to

>>> const Redirect: (a: IRedirectAttributes) => string;
### Redirect
### ITargetAttributes

>>> match: IMatch;
### match

>>> type TargetComponent = Component<ITargetAttributes>;
### TargetComponent

>>> type TargetNode = LazyVNode<ITargetAttributes>;
### TargetNode
### IRouteAttributes

>>> path: string;
### path

>>> exact: boolean;
### exact

>>> component: TargetComponent;
### component

>>> const Route: (a: IRouteAttributes) => LazyVNode<ITargetAttributes>;
### Route
### IRendererOwner
### Router

>>> constructor(rOwner: IRendererOwner, jsxf: JSXFactory);
### undefined

>>> go(t: string | IToObject): void;
### go

>>> stop(): void;
### stop

>>> const Switch: (a: {}, children: LazyVNode<{}>[]) => LazyVNode<{}>;
### Switch
